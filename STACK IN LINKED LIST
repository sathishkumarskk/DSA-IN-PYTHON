class node:
    def __init__(self,val):
        self.data=val
        self.next= None
class stack:
    def __init__(self):
        self.top=None
        self.popy=None
        self.popy2=None
    def push(self,val):  #correct  
        n_node=node(val)
        n_node.next=self.top
        self.top=n_node
    def pop(self):
      print("Remove and return the top element:",self.top.next.data)     
      if self.top!=None:
        self.top=self.top.next
    def peek(self):
        print("Top element without removing it:",self.top.data)
    def isempty(self):#correct
        if self.top==None:
            print("Empty")
        else:
            print("Not empty")
    def display(self):#correct
        d=self.top
        n=None
        while d!=None:
            print(d.data)
            d=d.next
    def count(self):
        d=self.top
        count=0
        while d!=None:
            count+=1
            d=d.next
        print(count)    
            
ob=stack()
print("ENTER ELEMENT TO PUSH INTO STACK ")
n=0
while n!="end":
        n=input("enter value to push into stack or enter [END] to stop\n")
        if n=="end" or n=="END" or n=="End":
            break
        else:
            num=int(n)
            ob.push(num)
print("\n")  
print("Successfully pushed into stack")        
print("\n")        
op1=0 
while op1!="end":
    op1=input("ENTER WHICH METHOD\n POP(1), PEEK(2), ISEMPTY(3), DISPLAY(4),COUNT(5) : ")  
    if  op1=='1':
        print("\n")
        ob.pop()
        print("\n")
        print("__________________________________________________________________")
    elif op1=='2':
        print("\n")
        ob.peek()
        print("\n")
        print("__________________________________________________________________")        
    elif op1=='3':
        print("\n")
        ob.isempty()  
        print("\n")
        print("__________________________________________________________________")        
    elif op1=='4':
        print("\n")
        print("all elements from top to bottom")
        ob.display()    
        print("\n")
        print("__________________________________________________________________") 
    elif op1=='5':
        print("\n")
        print("COUNT:")
        ob.count()    
        print("\n")
        print("__________________________________________________________________")        
    else:
        print("METHOD NOT FOUND")
        print("__________________________________________________________________")        


---------EXPLANATION---------------

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class LinkedList:
    def __init__(self):
        self.head = None 
    def insert_at_begin(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

——————————TRACE TEST————————-
node=[data,next]
1->new_node= [data=5,next=none]
      New_node.next=head[none]
      ‘’head=new_node—>[data=5,next=none]’’
2->new_node=node=[data=10,next=none]
      new_node.next=head=[data=5,next=none]
      head=new_node
      head=[data=10,data=5,next=none]
3->
     new_node=node=[data=15,next=none]
     new_node.next=[data=10,data=5,next=none]
     head=new_node
     head=[data=15,data=10,data=5,next=none]
4->
     head=[data=20,data=15,data=10,data=5,next=none]
5->
    head=[data=25,data=20,data=15,data=10,data=5,next=none]]
